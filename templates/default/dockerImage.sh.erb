#!/usr/bin/env bash

set -e

help() {
    echo ""
    echo "usage: $0 [create docker_file tag] | [list image]"
    echo ""
    exit 1
}

REGISTRY_URL='<%= @registry_addr %>'
VALID_IMAGE_NAME='<%= node['conda']['docker']['image-validation-regex'] %>'
if [ "$1" == "create" ] ; then

    # Sanity checks for injection attacks
    if [ ! -f "$2" ] ; then
	echo "Invalid docker file: $2" >&2
	help
    fi
    if ! [[ $3 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $3" >&2
	help
    fi

    DOCKER_BUILDKIT=1 docker build --network=host -f $2 --tag $3 ./

    docker push $3

<% if node['install']['managed_docker_registry'] == "false" -%>
elif [ "$1" == "delete" ] ; then
    # Remove tags from docker registry
	  # Based on https://gist.github.com/jaytaylor/86d5efaddda926a25fa68c263830dac1
		curl -g -k -v -sSL -X DELETE "https://$REGISTRY_URL/v2/$2/manifests/$(
			curl -g -k -sSL -I \
			-H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
			"https://$REGISTRY_URL/v2/$2/manifests/$(
				curl -g -k -sSL "https://$REGISTRY_URL/v2/$2/tags/list" | jq -r '.tags[0]'
			)" \
			| awk 'tolower($1) == "docker-content-digest:" { print $2 }' \
			| tr -d $'\r' \
		)"

elif [ "$1" == "gc" ] ; then
    # Run garbage collection for registry
    docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml -m
	  docker container restart registry

<% end -%>

elif [ "$1" == "list" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    # make sure that the image has RepoDigests before pulling, images loaded using docker load will not have it
    if [[ $(docker inspect --format='{{len .RepoDigests}}' $2) -gt 0 ]] ; then
         docker pull $2 > /dev/null 2>&1
    fi
    docker run --rm $2 conda list -n theenv

elif [ "$1" == "check" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    # make sure that the image has RepoDigests before pulling, images loaded using docker load will not have it
    if [[ $(docker inspect --format='{{len .RepoDigests}}' $2) -gt 0 ]] ; then
         docker pull $2 > /dev/null 2>&1
    fi
    docker run --rm $2 pip check

elif [ "$1" == "export" ] ; then
    if ! [[ $2 =~ $VALID_IMAGE_NAME ]] ; then
	echo "error: Not an image name $2" >&2
	help
    fi

    # make sure that the image has RepoDigests before pulling, images loaded using docker load will not have it
    if [[ $(docker inspect --format='{{len .RepoDigests}}' $2) -gt 0 ]] ; then
         docker pull $2 > /dev/null 2>&1
    fi
    docker run --rm $2 conda env export -n theenv

else
    help
fi

exit $?
